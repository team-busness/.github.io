{"version":3,"sources":["blog/components/login/login.jsx","blog/components/login/register.jsx","blog/components/layout/index.jsx","blog/components/life/index.jsx","blog/components/notebook/shijianchuli.jsx","blog/components/notebook/tiaojianxuanran.jsx","blog/components/notebook/contro.jsx","blog/components/notebook/stateComponent.jsx","blog/components/notebook/index.jsx","blog/components/selectInput/index.jsx","blog/components/home/index.jsx","blog/components/login/home.jsx","blog/components/login/index.jsx","blog/index.jsx","serviceWorker.js","index.js"],"names":["Login","handleChange","target","setState","name","value","onSubmit","state","username","password","trim","alert","login","userInfo","console","log","props","getstatus","typename","JSON","parse","sessionStorage","getItem","this","className","type","placeholder","onChange","onClick","href","Component","index","handleSubmit","e","preventDefault","register","setItem","stringify","toLogin","onReset","reSetForm","autoComplete","Header","Layout","Sider","Content","MenuData","content","hash","id","Index","toggle","collapsed","changehash","trigger","collapsible","theme","mode","defaultSelectedKeys","map","item","Item","key","style","background","padding","margin","minHeight","children","Panel","Collapse","text","title","accordion","header","shijianchuli","listStyle","tiaojianxuanran","stateComponent","checkbox","checked","radio","htmlFor","changeHash","window","location","isCom","slice","onhashchange","Dom","data","isDom","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a3f18b7.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n// 登陆\r\nimport { Button } from 'antd'\r\n// import Home from './home.jsx'\r\nexport default class Login extends Component {\r\n  constructor() {\r\n    super()\r\n    this.userInfo = JSON.parse(sessionStorage.getItem('userRegister'))\r\n    this.state = {\r\n      username: (this.userInfo && this.userInfo.username) + '' || '',\r\n      password: ''\r\n    }\r\n  }\r\n  //  改变input值\r\n  handleChange = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: target.value\r\n    })\r\n  }\r\n  // 提交\r\n  onSubmit = () => {\r\n    const { username, password } = this.state\r\n    // 1.前端验证\r\n    if (!username.trim()) {\r\n      return alert('用户名不能为空')\r\n    } else if (!password.trim()) {\r\n      return alert('密码不能为空')\r\n    }\r\n    // 2.走接口\r\n\r\n    // 3.本地测试：前端需要做后端的逻辑对比，一般后端来做判断\r\n    // 假设：这里的数据就是接口获取的\r\n    const login = { username, password }\r\n    // 假设这里的数据就是从数据库读出来的\r\n    const userInfo = this.userInfo\r\n    // 使用的接口的数据与数据库的数据对比，如果一致，说明登陆成功\r\n    if (!username) {\r\n      return alert('该账号不存在，请立即注册')\r\n    } else if (userInfo.username != login.username) {\r\n      console.log(userInfo.username)\r\n      console.log(login.username)\r\n      return alert('用户名不对')\r\n    } else if (userInfo.password != login.password) {\r\n      return alert('密码错误')\r\n    }\r\n    // console.log(res.data)\r\n    this.props.getstatus({ typename: 'home' })\r\n    // getstatus() // 跳转页面\r\n    return console.log('提交')\r\n  }\r\n\r\n  // 渲染函数\r\n  render() {\r\n    const { username, password, getstatus } = this.state\r\n\r\n    return (\r\n      <div className=\"login\">\r\n        <h1>登录</h1>\r\n        <form className=\"form\">\r\n          <label>\r\n            用户名：\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"用户名\"\r\n              value={username}\r\n              onChange={this.handleChange}\r\n              name=\"username\"\r\n            />\r\n          </label>\r\n          <label>\r\n            密码框：\r\n            <input\r\n              type=\"password\"\r\n              placeholder=\"密码\"\r\n              value={password}\r\n              onChange={this.handleChange}\r\n              name=\"password\"\r\n            />\r\n          </label>\r\n          <label className=\"btn\">\r\n            <Button type=\"primary\" onClick={this.onSubmit}>\r\n              登陆\r\n            </Button>\r\n            <a\r\n              href=\"#\"\r\n              onClick={() => this.props.getstatus({ typename: 'register' })}\r\n            >\r\n              注册一个\r\n            </a>\r\n          </label>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// 注册部分\r\nimport React, { Component } from 'react'\r\nimport { Button } from 'antd'\r\n// 为重置使用保存的全局数据\r\nconst myState = {\r\n  username: '',\r\n  password: '',\r\n  radio: '1'\r\n}\r\n\r\nexport default class index extends Component {\r\n  // 表单的提交事件\r\n  handleSubmit = e => {\r\n    e.preventDefault() //取消默认事件\r\n  }\r\n\r\n  // 改变state里的值\r\n  handleChange = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: [target.value]\r\n    })\r\n  }\r\n\r\n  // 构造函数\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      username: '',\r\n      password: ''\r\n    }\r\n  }\r\n  //注册\r\n  register = () => {\r\n    // 1.前端验证，验证通过以后\r\n    const { username, password } = this.state\r\n    if (!username) {\r\n      return alert('用户不能为空')\r\n    } else if (!password) {\r\n      return alert('密码不能为空')\r\n    }\r\n    // 2.调用接口，接口返回的数据存到全局里面\r\n    // 凡是涉及用户数据信息的，在接口一定使用post请求方式\r\n\r\n\r\n        // 将账户密码存到本地一份【注意：在真实的项目里，不能这样做，仅适用于测试本地开发】\r\n        sessionStorage.setItem(\r\n          'userRegister',\r\n          JSON.stringify({ username, password })\r\n        )\r\n        // 3.控制跳转到登陆页面\r\n\r\n        this.props.getstatus({typename: 'login' })\r\n\r\n\r\n  }\r\n\r\n  // 注册过的用户进入登录页\r\n  toLogin = () => {\r\n    this.props.getstatus({ typename: 'login' })\r\n  }\r\n\r\n  // 渲染函数\r\n  render() {\r\n    const { username, password } = this.state\r\n    return (\r\n      <div className=\"register\">\r\n        <h1>注册</h1>\r\n        <form\r\n          onSubmit={this.handleSubmit}\r\n          onReset={this.reSetForm}\r\n          autoComplete=\"off\"\r\n          className=\"form\"\r\n        >\r\n          <label>\r\n            用户名:\r\n            <input\r\n              type=\"text\"\r\n              value={username}\r\n              onChange={this.handleChange}\r\n              name=\"username\"\r\n            />\r\n          </label>\r\n          <label>\r\n            密码框:\r\n            <input\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={this.handleChange}\r\n              name=\"password\"\r\n            />\r\n          </label>\r\n\r\n          <label className=\"btn\">\r\n            <Button type=\"primary\" onClick={this.register}>\r\n              注册提交\r\n            </Button>\r\n            <a href=\"#\" onClick={this.toLogin} >\r\n              登录\r\n            </a>\r\n          </label>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// 模板组件\r\nimport React, { Component } from 'react'\r\n// 引入布局组件\r\n// Layout 代表最外层   Menu代表导航  Icon代表图标\r\nimport { Layout, Menu, Icon } from 'antd'\r\n\r\nconst { Header, Sider, Content } = Layout\r\n\r\n// 定义侧边栏菜单数据\r\nconst MenuData = [\r\n  { content: '生命周期', type: 'solution', hash: 'life', id: '1' },\r\n  { content: '知识吧', type: 'solution', hash: 'knowHow', id: '2' },\r\n  { content: '选择吧', type: 'solution', hash: 'select', id: '3' }\r\n]\r\nexport default class Index extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      collapsed: false //控制是否显示侧边栏\r\n    }\r\n  }\r\n\r\n  // 切换导航栏显示和隐藏\r\n  toggle = () => {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    })\r\n  }\r\n  render(props) {\r\n    const { changehash } = this.props\r\n    return (\r\n      <Layout>\r\n        <Sider trigger={null} collapsible collapsed={this.state.collapsed}>\r\n          <div className=\"logo\" />\r\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n            {/* 侧边栏导航内容 */}\r\n            {/* 遍历设置好的数据 */}\r\n            {MenuData.map((item, index) => {\r\n              return (\r\n                // 给每一个菜单绑定事件点击获取每一项给定的hash值\r\n                <Menu.Item\r\n                  key={index}\r\n                  onClick={() => {\r\n                    changehash(item.hash)\r\n                  }}\r\n                >\r\n                  <Icon type={item.type} />\r\n                  <span>{item.content}</span>\r\n                </Menu.Item>\r\n              )\r\n            })}\r\n          </Menu>\r\n        </Sider>\r\n        <Layout>\r\n          <Header style={{ background: '#fff', padding: 0 }}>\r\n            <Icon\r\n              className=\"trigger\"\r\n              type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\r\n              onClick={this.toggle}\r\n            />\r\n          </Header>\r\n          <Content\r\n            style={{\r\n              margin: '24px 16px',\r\n              padding: 24,\r\n              background: '#fff',\r\n              minHeight: 280\r\n            }}\r\n          >\r\n            {/* 显示模板里当前插槽里的内容组件 */}\r\n            {this.props.children}\r\n          </Content>\r\n        </Layout>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n","// 声明周期\r\nimport React, { Component } from 'react'\r\nimport { Collapse } from 'antd'\r\n\r\nconst { Panel } = Collapse\r\n\r\nconst text = [\r\n  { title: '初始挂载阶段', content: 'constructor() {} ', id: '1' },\r\n  { title: '解析虚拟dom阶段', content: 'render() {}  解析  虚拟dom ', id: '2' },\r\n  { title: '成功阶段', content: 'componentWillMount() {}   挂载前', id: '3' },\r\n  { title: '更新阶段', content: 'componentDidUpdate() { } 更新完成 ', id: '4' },\r\n  { title: '卸载阶段', content: 'componentDidUnmount() {}  卸载完成', id: '5' }\r\n]\r\n\r\nexport default class Index extends Component {\r\n  render() {\r\n    return (\r\n      <Collapse accordion>\r\n        {text.map((item, index) => {\r\n          return (\r\n            <Panel header={item.title} key={item.id}>\r\n              <p>{item.content}</p>\r\n            </Panel>\r\n          )\r\n        })}\r\n      </Collapse>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class shijianchuli extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        事件处理 React 元素的事件处理和 DOM\r\n        <ul>\r\n          <li style={{ listStyle: 'none' }}>\r\n            元素的很相似，但是有一点语法上的不同:\r\n          </li>\r\n          <li>React 事件的命名采用小驼峰式（camelCase），而不是纯小写。</li>\r\n          <li>\r\n            使用JSX语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class tiaojianxuanran extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        条件渲染\r\n        <ul>\r\n          <li>\r\n            在 React\r\n            中，你可以创建不同的组件来封装各种你需要的行为。然后，依据应用的不同状态，你可以只渲染对应状态下的部分内容。\r\n          </li>\r\n          <li>\r\n            {' '}\r\n            React 中的条件渲染和 JavaScript 中的一样，使用 JavaScript 运算符 if\r\n            或者条件运算符去创建元素来表现当前的状态， 然后让 React\r\n            根据它们来更新 UI。\r\n          </li>\r\n          <li>条件渲染的集中方式 if switch || && ！ 三目运算符 1? 'ok':\"no\"</li>\r\n          <li>\r\n            条件渲染的适应场景 对一个元素进行显示隐藏 条件渲染===vue v-if v-show\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class index extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>control and unControl</h3>\r\n        <h1>我和control有个约定！~^_^</h1>\r\n        <ul>\r\n          <li>\r\n            受控组件 定义 在HTML中 表单元素 如input textatea select 在react中\r\n            可变状态mutable state 通常保存在组件的state属性中\r\n            并且只能通过使用set State来更新 我们可以把两者结合起来\r\n            使react的state成为 唯一数据源\r\n            渲染表单的React组件还控制着用户输入国产发生的操作\r\n            被React以这种方式控制取值 的表单输入元素 就叫受控组件\r\n          </li>\r\n          <li>\r\n            非受控组件 ： - 使用 ref 绑定的 input 元素 -type='file'因为它的\r\n            value 是只读的无法绑定 react 的 state，所以它是非受控组件。 - button\r\n            按钮的值一般也是写死的，name 它也是非受控组件 2. 受控组件: -\r\n            定义：在 HTML 中，表单元素(如input、textarea和select在 React\r\n            中，可变状态(mutable state)通常保存在组件的 state 属性中，\r\n            并且只能通过使用 setState()来更新。 - 我们可以把两者结合起来，使用\r\n            React 的 state 成为'唯一数据源'。渲染表单的 React\r\n            组件还控制着用户输入过程中表单发生的操作。 被 React\r\n            以这种方式控制取值的表单输入元素就叫做'受控组件'\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class stateComponent extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ul>\r\n          <li>\r\n            <p>无状态组件</p>\r\n            <ul>\r\n              <li>\r\n                (箭头函数/函数)组件，不需要实例化，没有this.只接收一个props【属性】。\r\n              </li>\r\n              <li> 用于：ui组件、展示组件、专门写dom的组件</li>\r\n              <li>优点：加载快、渲染快.不会产生额外的内存占用。</li>\r\n              <li>缺点:功能单一，没有react其他特性，只有一个props属性可用</li>\r\n              <li>好处：简单渲染快</li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            <p>class组件</p>\r\n            <ul>\r\n              <li>\r\n                拥有this指向，拥有react一切特性，功能强大、功能丰富.可宽展性强\r\n              </li>\r\n              <li>\r\n                class组件：会被实例化，拥有this指向，拥有react一切特性：生命周期、状态、边界错误等等；\r\n              </li>\r\n              <li>用于：容器组件，承载逻辑与接口，又叫功能组件</li>\r\n              <li> 优点：功能强大、功能丰富.可宽展性强</li>\r\n              <li>\r\n                缺点:渲染比无状态组件慢，容易代码臃肿 好处：有this、功能强大\r\n              </li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './index.scss'\r\nimport EventHandle from './shijianchuli'\r\nimport ConditionRender from './tiaojianxuanran'\r\nimport Contr from './contro'\r\nimport StateComponent from './stateComponent'\r\nexport default class index extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>小小知识吧 轻松你我他</h1>\r\n        <h2>Come Here！~ Everything Gets Control！！~</h2>\r\n        <h2>来到这里 一切都在掌握之中 !~</h2>\r\n        <h3>认清组件</h3>\r\n        <StateComponent />\r\n        <h3>事件处理</h3>\r\n        <EventHandle />\r\n        <h3>条件渲染</h3>\r\n        <ConditionRender />\r\n        <h3>受控和非受控</h3>\r\n        <Contr />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\nimport './index.scss'\nexport default class index extends Component {\n  constructor() {\n    super()\n    this.state = {\n      radio: '',\n      checkbox: [false, true, false]\n    }\n  }\n  //单选\n  handleChange = ({ target }) => {\n    // console.log(target.name)\n    // console.log(target.value)\n    this.setState({\n      [target.name]: target.value\n    })\n  }\n  //多选\n  handleChange = ({ target }) => {\n    if (target.name == 'checkbox') {\n      const newCheckbox = [...this.state.checkbox]\n      newCheckbox[target.value] = target.checked\n      // console.log(newCheckbox)\n      this.setState({\n        [target.name]: target.value\n      })\n    } else {\n      this.setState({\n        [target.name]: target.value\n      })\n    }\n  }\n  render() {\n    const { radio, checkbox } = this.state\n    return (\n      <form className=\"form-back\">\n        <div className=\"div-pt\">**市场调查问卷</div>\n        <div className=\"div-back-9\">1.你目前的主要投资理财途径?</div>\n        <label htmlFor=\"\">\n          <input\n            type=\"radio\"\n            name=\"radio\"\n            checked={radio == '1'}\n            value=\"1\"\n            onChange={this.handleChange}\n          />\n          没有看法\n        </label>\n        <label htmlFor=\"\">\n          <input\n            type=\"radio\"\n            name=\"radio\"\n            checked={radio == '2'}\n            value=\"2\"\n            onChange={this.handleChange}\n          />\n          我认为996应该近早废弃\n        </label>\n        <label htmlFor=\"\">\n          <input\n            type=\"radio\"\n            name=\"radio\"\n            checked={radio == '3'}\n            value=\"3\"\n            onChange={this.handleChange}\n          />\n          互联网未来会主导世界\n        </label>\n\n        <div className=\"div-back\"></div>\n\n        <div className=\"div-back-9\">10.你有那些爱好?</div>\n        <label htmlFor=\"\">\n          <input\n            type=\"checkbox\"\n            name=\"checkbox\"\n            checked={checkbox[33]}\n            value=\"33\"\n            onChange={this.handleChange}\n          />\n          一天吃五次主食\n        </label>\n        <label htmlFor=\"\">\n          <input\n            type=\"checkbox\"\n            name=\"checkbox\"\n            checked={checkbox[34]}\n            value=\"34\"\n            onChange={this.handleChange}\n          />\n          吃完主食还要喝可乐\n        </label>\n        <label htmlFor=\"\">\n          <input\n            type=\"checkbox\"\n            name=\"checkbox\"\n            checked={checkbox[35]}\n            value=\"35\"\n            onChange={this.handleChange}\n          />\n          吃完主食还要喝可乐还要吃半斤零食\n        </label>\n        <label htmlFor=\"\">\n          <input\n            type=\"checkbox\"\n            name=\"checkbox\"\n            checked={checkbox[36]}\n            value=\"36\"\n            onChange={this.handleChange}\n          />\n          吃完上面多食物还要打开朋友圈发一条减肥多口令\n        </label>\n        <label htmlFor=\"\">\n          <input\n            type=\"checkbox\"\n            name=\"checkbox\"\n            checked={checkbox[36]}\n            value=\"36\"\n            onChange={this.handleChange}\n          />\n          素食主\n        </label>\n        <label htmlFor=\"\">\n          <input\n            type=\"checkbox\"\n            name=\"checkbox\"\n            checked={checkbox[36]}\n            value=\"36\"\n            onChange={this.handleChange}\n          />\n          热爱运动\n        </label>\n        <label htmlFor=\"\">\n          <input\n            type=\"checkbox\"\n            name=\"checkbox\"\n            checked={checkbox[36]}\n            value=\"36\"\n            onChange={this.handleChange}\n          />\n          喜欢古典音乐\n        </label>\n        <label htmlFor=\"\">\n          <input\n            type=\"checkbox\"\n            name=\"checkbox\"\n            checked={checkbox[36]}\n            value=\"36\"\n            onChange={this.handleChange}\n          />\n          喜欢看书，偶尔写写字\n        </label>\n        <div className=\"div-back\"></div>\n        <div>你认为当代年轻人应该持有怎样的世界观、价值观、人生观</div>\n        <textarea className=\"text-back\"></textarea>\n        <div className=\"div-back\"></div>\n        <label htmlFor=\"\">\n          <button type=\"button\" className=\"but-back\">\n            确认提交 >\n          </button>\n        </label>\n      </form>\n    )\n  }\n}\n","import React, { Component } from 'react'\r\n// 引入模板组件\r\nimport MyLayout from '../layout/index'\r\n// 引入声明周期\r\nimport Life from '../life/index'\r\n// 引入知识库\r\nimport KnowHow from '../notebook/index'\r\n// 引入选择框\r\nimport Select from '../selectInput/index'\r\nexport default class Index extends Component {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      isCom: window.location.hash.slice(1) || 'knowHow' //要渲染的组件标识\r\n    }\r\n    window.location.href = '#' + this.state.isCom\r\n    window.onhashchange = () => {\r\n      this.setState({\r\n        isCom: window.location.hash.slice(1)\r\n      })\r\n    }\r\n  }\r\n\r\n  // 根据点击的菜单通过改变hash值来显示相应的页面\r\n  changeHash = id => {\r\n    // 改变页面hash值\r\n    window.location.hash = id\r\n  }\r\n\r\n  render() {\r\n    // 通过判断state中isCom从而渲染相应的组件\r\n    let Dom = ''\r\n    // eslint-disable-next-line default-case\r\n    switch (this.state.isCom) {\r\n      case 'life':\r\n        Dom = <Life />\r\n        break\r\n      case 'knowHow':\r\n        Dom = <KnowHow />\r\n        break\r\n      case 'select':\r\n        Dom = <Select />\r\n        break\r\n    }\r\n    return (\r\n      <div>\r\n        {/* 引入模板 */}\r\n        <MyLayout changehash={this.changeHash}>\r\n          {/* 渲染点击的菜单对应的组件 */}\r\n          {Dom}\r\n        </MyLayout>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n// 首页\r\nimport Home from '../home/index'\r\nexport default () => {\r\n  // 这里是防止用户通过手动进入网址\r\n  if (!sessionStorage.getItem('userRegister')) {\r\n    alert('您没有登陆不能进来')\r\n    window.location.hash = 'login'\r\n  }\r\n  return <Home />\r\n}\r\n","import React, { Component } from 'react'\r\nimport './style/index.scss'\r\n// 登陆\r\nimport Login from './login'\r\n// 注册\r\nimport Register from './register'\r\n// 引入首页\r\nimport Home from './home'\r\n\r\nexport default class Index extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      isDom: 'register'\r\n    }\r\n  }\r\n  // 获取组件的返回状态\r\n  getstatus = data => {\r\n    this.setState({\r\n      isDom: data.typename\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let Dom = ''\r\n    // eslint-disable-next-line default-case\r\n    switch (this.state.isDom) {\r\n      case 'register':\r\n        Dom = <Register getstatus={this.getstatus} />\r\n        break\r\n      case 'login':\r\n        Dom = <Login getstatus={this.getstatus} />\r\n        break\r\n      case 'home':\r\n        Dom = <Home />\r\n        break\r\n    }\r\n    return <div>{Dom}</div>\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Start from './components/login/index' // 登录部分\r\n\r\nexport default class Index extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* 项目由注册登录开始 */}\r\n        <Start />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './blog/index'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport 'antd/dist/antd.css'\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}