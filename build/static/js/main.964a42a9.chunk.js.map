{"version":3,"sources":["blog/components/login/login.jsx","blog/components/login/register.jsx","blog/components/login/home.jsx","blog/components/login/index.jsx","blog/index.jsx","serviceWorker.js","index.js"],"names":["Login","handleChange","target","setState","name","value","onSubmit","state","username","password","trim","axios","get","then","res","login","userInfo","console","log","alert","JSON","parse","sessionStorage","getItem","this","type","placeholder","onChange","onClick","Component","myState","radio","index","handleSubmit","e","preventDefault","reSetForm","register","status","setItem","stringify","data","props","getstatus","typename","onReset","autoComplete","checked","style","display","window","location","hash","Index","isDom","Dom","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.964a42a9.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n// 登陆\r\nexport default class Login extends Component {\r\n  constructor() {\r\n    super()\r\n    this.userInfo = JSON.parse(sessionStorage.getItem('userRegister'))\r\n    this.state = {\r\n      username: (this.userInfo && this.userInfo.username) + '' || '',\r\n      password: ''\r\n    }\r\n  }\r\n  //  改变input值\r\n  handleChange = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: target.value\r\n    })\r\n  }\r\n  // 提交\r\n  onSubmit = () => {\r\n    const { username, password } = this.state\r\n    // 1.前端验证\r\n    if (!username.trim()) {\r\n      return alert('用户名不能为空')\r\n    } else if (!password.trim()) {\r\n      return alert('密码不能为空')\r\n    }\r\n    // 2.走接口\r\n    axios\r\n      .get('/api/register.json', {\r\n        username,\r\n        password\r\n      })\r\n      .then(res => {\r\n        // 3.本地测试：前端需要做后端的逻辑对比，一般后端来做判断\r\n        // 假设：这里的数据就是接口获取的\r\n        const login = { username, password }\r\n        // 假设这里的数据就是从数据库读出来的\r\n        const userInfo = this.userInfo\r\n        // 使用的接口的数据与数据库的数据对比，如果一致，说明登陆成功\r\n        if (!username) {\r\n          return alert('该账号不存在，请立即注册')\r\n        } else if (userInfo.username != login.username) {\r\n          console.log(userInfo.username)\r\n          console.log(login.username)\r\n          return alert('用户名不对')\r\n        } else if (userInfo.password != login.password) {\r\n          return alert('密码错误')\r\n        }\r\n        return console.log('提交')\r\n      })\r\n  }\r\n\r\n  // 渲染函数\r\n  render() {\r\n    const { username, password } = this.state\r\n    return (\r\n      <form>\r\n        <label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"用户名\"\r\n            value={username}\r\n            onChange={this.handleChange}\r\n            name=\"username\"\r\n          />\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"密码\"\r\n            value={password}\r\n            onChange={this.handleChange}\r\n            name=\"password\"\r\n          />\r\n        </label>\r\n        <label>\r\n          <button type=\"button\" onClick={this.onSubmit}>\r\n            登陆\r\n          </button>\r\n        </label>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n","// 受控组件\r\nimport React, { Component } from 'react'\r\nimport axios from 'axios'\r\n// 为重置使用保存的全局数据\r\nconst myState = {\r\n  username: '',\r\n  password: '',\r\n  radio: '1'\r\n}\r\nexport default class index extends Component {\r\n  // 表单的提交事件\r\n  handleSubmit = e => {\r\n    const { target } = e\r\n    e.preventDefault() //取消默认事件\r\n    // console.log('表单的提交事件')\r\n    // console.log(target.querySelectorAll('input[name=text]')[0].value)\r\n  }\r\n  // 重置表单事件\r\n  reSetForm = () => {\r\n    // console.log('重置表单')\r\n    this.setState(myState)\r\n  }\r\n\r\n  // 改变state里的值\r\n  handleChange = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: [target.value]\r\n    })\r\n  }\r\n\r\n  // 构造函数\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n      radio: '1'\r\n    }\r\n  }\r\n  //注册\r\n  register = () => {\r\n    // 1.前端验证，验证通过以后\r\n    const { username, password } = this.state\r\n    if (!username) {\r\n      return alert('用户不能为空')\r\n    } else if (!password) {\r\n      return alert('密码不能为空')\r\n    }\r\n    // 2.调用接口，接口返回的数据存到全局里面\r\n    // 凡是涉及用户数据信息的，在接口一定使用post请求方式\r\n    axios.get('/api/register.json', {}).then(res => {\r\n      console.log(res)\r\n      if (res.status === 200) {\r\n        // 将账户密码存到本地一份【注意：在真实的项目里，不能这样做，仅适用于测试本地开发】\r\n        sessionStorage.setItem(\r\n          'userRegister',\r\n          JSON.stringify({ username, password })\r\n        )\r\n        // 3.控制跳转到登陆页面\r\n        console.log(res.data)\r\n        this.props.getstatus({ ...res.data, typename: 'login' })\r\n      } else {\r\n        alert('网络错误，请检查！~')\r\n      }\r\n    })\r\n  }\r\n  // 渲染函数\r\n  render() {\r\n    const { username, password, radio } = this.state\r\n    return (\r\n      <form\r\n        onSubmit={this.handleSubmit}\r\n        onReset={this.reSetForm}\r\n        autoComplete=\"off\"\r\n      >\r\n        <label>\r\n          用户名:\r\n          <input\r\n            type=\"text\"\r\n            value={username}\r\n            onChange={this.handleChange}\r\n            name=\"username\"\r\n          />\r\n        </label>\r\n        <label>\r\n          密码框:\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={this.handleChange}\r\n            name=\"password\"\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          单选框：\r\n          <input\r\n            type=\"radio\"\r\n            name=\"radio\"\r\n            checked={radio == '0'}\r\n            value=\"0\"\r\n            onChange={this.handleChange}\r\n          />\r\n          <input\r\n            type=\"radio\"\r\n            name=\"radio\"\r\n            checked={radio == '1'}\r\n            value=\"1\"\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          <button type=\"button\" onClick={this.register}>\r\n            注册提交\r\n          </button>\r\n          <button type=\"submit\" style={{ display: 'none' }}>\r\n            登陆提交\r\n          </button>\r\n          <button type=\"reset\">重置</button>\r\n        </label>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n// 首页\r\nexport default () => {\r\n  // 这里是防止用户通过手动进入网址\r\n  if (!sessionStorage.getItem('userinfo')) {\r\n    alert('您没有登陆不能进来')\r\n    window.location.hash = 'login'\r\n  }\r\n\r\n  return <div>这是首页</div>\r\n}\r\n","import React, { Component } from 'react'\r\nimport './style/index.scss'\r\n// 登陆\r\nimport Login from './login'\r\n// 注册\r\nimport Register from './register'\r\n// 引入首页\r\nimport Home from './home'\r\nexport default class Index extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      isDom: 'register'\r\n    }\r\n  }\r\n  // 获取组件的返回状态\r\n  getstatus = data => {\r\n    this.setState({\r\n      isDom: data.typename\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let Dom = ''\r\n    // eslint-disable-next-line default-case\r\n    switch (this.state.isDom) {\r\n      case 'register':\r\n        Dom = <Register getstatus={this.getstatus} />\r\n        break\r\n      case 'login':\r\n        Dom = <Login />\r\n        break\r\n      case 'home':\r\n        Dom = <Home />\r\n        break\r\n    }\r\n    return <div>{Dom}</div>\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Login from './components/login/index' // 登录部分\r\nexport default class Index extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* 项目由注册登录开始 */}\r\n        <Login />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './blog/index'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport 'antd/dist/antd.css'\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}