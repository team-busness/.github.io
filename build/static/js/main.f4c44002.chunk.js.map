{"version":3,"sources":["blog/components/layout/index.jsx","blog/components/ReactBase/index.jsx","blog/components/top-level/index.jsx","blog/components/slot/index.jsx","blog/components/class-Stateless/index.jsx","blog/components/comwtym/index.jsx","blog/components/comwtym2/index.jsx","blog/components/comzjfl/index.jsx","blog/components/Reactdfzhqy/index.jsx","blog/index.jsx","serviceWorker.js","index.js"],"names":["Header","Layout","Sider","Content","MenuData","content","type","hash","Index","toggle","setState","collapsed","state","props","changehash","this","trigger","collapsible","className","theme","mode","defaultSelectedKeys","map","item","index","Item","key","onClick","style","background","padding","margin","minHeight","children","Component","gutter","span","title","bordered","label","data","reactBase","inde","changeHash","id","window","location","isCom","onhashchange","slice","Dom","Reactdfzhqy","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4c44002.chunk.js","sourcesContent":["// 模板组件\r\nimport React, { Component } from 'react'\r\n// 引入布局组件\r\n// Layout 代表最外层   Menu代表导航  Icon代表图标\r\nimport { Layout, Menu, Icon } from 'antd'\r\n\r\nconst { Header, Sider, Content } = Layout\r\n\r\n// 定义侧边栏菜单数据\r\nconst MenuData = [\r\n  { content: 'React发展和起源', type: 'video-camera', hash: 'Reactdfzhqy' },\r\n  { content: '顶级API', type: 'user', hash: 'reactBase' },\r\n  { content: '组件类型', type: 'video-camera', hash: 'ComponentType' },\r\n  { content: '知识总结', type: 'video-camera', hash: 'Slot' },\r\n  { content: 'class和无状态组件', type: 'video-camera', hash: 'ClassState' },\r\n  { content: '搭建和配置', type: 'video-camera', hash: 'Comwtym' },\r\n  { content: '渲染组件', type: 'video-camera', hash: 'Comwtym2' },\r\n  { content: '组件分类', type: 'video-camera', hash: 'Comzjfl' }\r\n]\r\nexport default class Index extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      collapsed: false //控制是否显示侧边栏\r\n    }\r\n  }\r\n\r\n  // 切换导航栏显示和隐藏\r\n  toggle = () => {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    })\r\n  }\r\n  render(props) {\r\n    const { changehash } = this.props\r\n    return (\r\n      <Layout>\r\n        <Sider trigger={null} collapsible collapsed={this.state.collapsed}>\r\n          <div className=\"logo\" />\r\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n            {/* 侧边栏导航内容 */}\r\n            {/* 遍历设置好的数据 */}\r\n            {MenuData.map((item, index) => {\r\n              return (\r\n                // 给每一个菜单绑定事件点击获取每一项给定的hash值\r\n                <Menu.Item\r\n                  key={index}\r\n                  onClick={() => {\r\n                    changehash(item.hash)\r\n                  }}\r\n                >\r\n                  <Icon type={item.type} />\r\n                  <span>{item.content}</span>\r\n                </Menu.Item>\r\n              )\r\n            })}\r\n          </Menu>\r\n        </Sider>\r\n        <Layout>\r\n          <Header style={{ background: '#fff', padding: 0 }}>\r\n            <Icon\r\n              className=\"trigger\"\r\n              type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\r\n              onClick={this.toggle}\r\n            />\r\n          </Header>\r\n          <Content\r\n            style={{\r\n              margin: '24px 16px',\r\n              padding: 24,\r\n              background: '#fff',\r\n              minHeight: 280\r\n            }}\r\n          >\r\n            {/* 显示模板里当前插槽里的内容组件 */}\r\n            {this.props.children}\r\n          </Content>\r\n        </Layout>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class index extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <ul>\r\n            <li> 1.渲染函数 ReactDOM.render(插入元素，目标元素)</li>\r\n            <li>\r\n              2. React.children.map(dom对象组，（每一项，索引）=>返回元素)\r\n              遍历虚拟dom\r\n            </li>\r\n            <li>\r\n              3 .React.cloneElement( 要克隆的虚拟dom, 返回元素, '我是合并的內容'\r\n              ) 克隆虚拟dom\r\n            </li>\r\n            <li>\r\n              4. React.createElement(元素类型，元素属性，元素内容) 创建虚拟元素\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class index extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h1>顶级API</h1>\r\n          <ul>\r\n            <li> 1.渲染函数 ReactDOM.render(插入元素，目标元素)</li>\r\n            <li>\r\n              2. React.children.map(dom对象组，（每一项，索引）=>返回元素)\r\n              遍历虚拟dom\r\n            </li>\r\n            <li>\r\n              3 .React.cloneElement( 要克隆的虚拟dom, 返回元素, '我是合并的內容'\r\n              ) 克隆虚拟dom\r\n            </li>\r\n            <li>\r\n              4. React.createElement(元素类型，元素属性，元素内容) 创建虚拟元素\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Card, Col, Row } from 'antd'\r\nimport './index.scss'\r\nexport default class index extends Component {\r\n  render() {\r\n    return (\r\n      <Row gutter={16}>\r\n        <Col span={8}>\r\n          <Card title=\"React 组件三种写法\" bordered={false}>\r\n            <p> 1. function 无状态组件，只接受一个 props</p>\r\n            <p>2. class es6 的写法，继承React.Component </p>\r\n            <p>3. createClass 了解，最后一版本 15.5.0 新版里被废弃</p>\r\n          </Card>\r\n        </Col>\r\n        <Col span={8}>\r\n          <Card title=\"React 中处理异步\" bordered={false}>\r\n            <p>关于 setState</p>\r\n            <p> setState:</p>\r\n            1.setState 不会立刻改变 React 组件中 state 的值。\r\n            <br />\r\n            2.setState 通过触发一次组价的更新来引发重绘。\r\n            <br />\r\n            3.多次 setState 函数调用产生的效果会合并。\r\n            <br />\r\n            setState：异步\r\n            <br />\r\n            1.时间处理函数内部的 setState 是异步的\r\n            <br />\r\n            2.这种机制可以在大型应用中得到很好的性能提升\r\n            <br />\r\n          </Card>\r\n        </Col>\r\n        <Col span={8}>\r\n          <Card title=\"配置引用文件路径\" bordered={false}>\r\n            在项目一级目录创建 jsconfig.json 写入：\r\n            <br />\r\n            {/* // {\"compilerOptions\":{\"baseUrl\":\"src\" }, \"include\":[\"src\"] } */}\r\n            <br />\r\n            使用的时候.可以绝对路径，src 下的路径都可以用绝对路径\r\n            https://blog.csdn.net/ qq_41287423/article/details/85838575\r\n            <br />\r\n            配置本地开发跨域请求 3.1、在 package.json\r\n            文件里写入：\"proxy\":\"第三方网址\" <br />\r\n            3.2、使用的时候：axios.get('/id) 在 react 里面解决跨域问题 4.1 在\r\n            package.json 配置 4.2 在 <br />\r\n            webpackServer.config.js 配置 4.3 使用 jsonp 模块解决跨域 4.4 使用\r\n            nodejs 做中间服务层解决跨域\r\n            <br />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Index extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"classState\">\r\n        <h1>无状态组件</h1>\r\n        <p>\r\n          1.无状态组件：(箭头函数/函数)组件，不需要实例化，没有this.只接收一个props【属性】。\r\n          用于：ui组件、展示组件、专门写dom的组件\r\n          优点：加载快、渲染快.不会产生额外的内存占用。\r\n          缺点:功能单一，没有react其他特性，只有一个props属性可用\r\n          好处：简单渲染快\r\n        </p>\r\n        <h1>class</h1>\r\n        <p>\r\n          class组件\r\n          ：拥有this指向，拥有react一切特性，功能强大、功能丰富.可宽展性强\r\n          2.class组件：会被实例化，拥有this指向，拥有react一切特性：生命周期、状态、边界错误等等；\r\n          用于：容器组件，承载逻辑与接口，又叫功能组件\r\n          优点：功能强大、功能丰富.可宽展性强\r\n          缺点:渲染比无状态组件慢，容易代码臃肿 好处：有this、功能强大\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"," import React from \"react\";\r\n// 引入描述列表组件\r\nimport { Descriptions } from \"antd\";\r\nexport default props => {\r\n  return (\r\n    <Descriptions title=\"搭建和配置\">\r\n      <Descriptions.Item label=\"二、脚手架的搭建和配置\" key=\"2\" span={3}>\r\n        * 1.全局安装：npm install -g create-react-app\r\n\r\n        * 2.初始项目：create-react-app 项目 名称: reactapp201909\r\n        * 3.启动项目：npm start\r\n        * 4、npm run eject:重新生成依赖和配置 文件\r\n\r\n\t\tnpm run start :运行本地开发环境\r\n\t\tnpm run build :打包项目\r\n\t\tnpm run test：运行测试环境\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"npm run eject 如何释放脚手架的隐式文件\" key=\"3\" span={3}>\r\n        npm run eject: - 重新生成依赖和配置文件 - 本地项目里的依赖和全局依赖包版本不一致导致的 bug,可以使用此命令解决。\r\n\t\t注意： 如果项目初始化的时候就是在 git 仓库里的，那么我们在使用此命令的时候会失败\t\t\t\r\n\t\t控制台会提示我们应该先存储代码到本地 git 仓库\r\n\t\t解决办法：要么删掉 git 本地仓库，要么提交 git 仓库，才能正常使用此命令\r\n\t\t说明:\r\n\r\n\t\t- 使用脚手架初识的项目，默认是隐藏配置文件和一些依赖的，其目的是为了减少空间占用，\r\n  让项目结构更简单，但是有时候我们需要在配置文件里修改，那么就使用 eject 命令\r\n      </Descriptions.Item>\r\n\t \r\n    </Descriptions>\r\n  );\r\n};"," import React from \"react\";\r\n// 引入描述列表组件\r\nimport { Descriptions } from \"antd\";\r\nexport default props => {\r\n  return (\r\n    <Descriptions title=\"渲染组件\">\r\n\t  <Descriptions.Item label=\"插槽的形式渲染组件\" key=\"4\" span={3}>\r\n\t\t  1. 首次加载\r\n2. setState改变组件内部state。 \r\n注意：此处是说通过setState方法改变。\r\n我们可以通过setState来改变组件state的值，而且当state改变后，组件对应的也会重新渲染。\r\n改变state的值：我们可以使用Object.assign来实现。\r\n重新渲染组件：我们可以在改变state值后，调用render函数，重新渲染。异步的setState在后面的章节会实现。\r\n\r\n3. 接受到新的props\r\nreact在渲染组件时，组件会被babel转为React.createElement(fn, null)这种形式，第一参数是函数，所以我们需要从fn中获取由组件的jsx转换后的虚拟dom，然后在将虚拟dom渲染成真实dom。\r\n\t  </Descriptions.Item>\r\n    </Descriptions>\r\n  );\r\n};","import React from 'react';\r\n// 引入描述列表组件\r\nimport { Descriptions } from 'antd';\r\nexport default props => {\r\n  return (\r\n    <Descriptions title=\"组件问题\">\r\n      <Descriptions.Item\r\n        label=\"一、无状态组件的使用和 createElement 创建虚拟 dom\"\r\n        key=\"1\"\r\n        span={3}\r\n      >\r\n        <p>\r\n          定义：React.creacteElement('div',null,null)// 在虚拟 dom 中使用 js\r\n          的变量或者函数之类的，都需要放在一个{}js 表达式，理解为 js\r\n          需要执行的环境\r\n        </p>\r\n        <p>方法:用于创建虚拟 DOM 对象，他接收 3 个及以上的参数。</p>\r\n        <p>\r\n          参数\r\n          1：表示要创建的元素类型，参数是个字符串类型（在此我理解为标签名字如：‘div’\r\n          ，‘p’）\r\n        </p>\r\n        <p>\r\n          参数 2：表示创建的元素含有哪些属性，参数是个对象（例如有\r\n          id，class，title 属性）\r\n        </p>\r\n        <p>\r\n          参数\r\n          3：表示当前创建元素的子节点，可以是文本内容，也可以是子标签，从第三个参数的位置开始，后面可以放好多的虚拟\r\n          DOM 对象（嵌套元素)\r\n        </p>\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"二、脚手架是搭建和配置\" key=\"2\" span={3}>\r\n        * 1.全局安装：npm install -g create-react-app *\r\n        2.初始项目：create-react-app 项目 名称: reactapp201909 * 3.启动项目：npm\r\n        start * 4、npm run eject:重新生成依赖和配置 文件 npm run start\r\n        :运行本地开发环境 npm run build :打包项目 npm run test：运行测试环境\r\n      </Descriptions.Item>\r\n      <Descriptions.Item\r\n        label=\"npm run eject 如何释放脚手架的隐式文件\"\r\n        key=\"3\"\r\n        span={3}\r\n      >\r\n        npm run eject: - 重新生成依赖和配置文件 -\r\n        本地项目里的依赖和全局依赖包版本不一致导致的 bug,可以使用此命令解决。\r\n        注意： 如果项目初始化的时候就是在 git\r\n        仓库里的，那么我们在使用此命令的时候会失败\r\n        控制台会提示我们应该先存储代码到本地 git 仓库 解决办法：要么删掉 git\r\n        本地仓库，要么提交 git 仓库，才能正常使用此命令 说明: -\r\n        使用脚手架初识的项目，默认是隐藏配置文件和一些依赖的，其目的是为了减少空间占用，\r\n        让项目结构更简单，但是有时候我们需要在配置文件里修改，那么就使用 eject\r\n        命令\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"插槽的形式渲染组件\" key=\"4\" span={3}>\r\n        1. 首次加载 2. setState改变组件内部state。\r\n        注意：此处是说通过setState方法改变。\r\n        我们可以通过setState来改变组件state的值，而且当state改变后，组件对应的也会重新渲染。\r\n        改变state的值：我们可以使用Object.assign来实现。\r\n        重新渲染组件：我们可以在改变state值后，调用render函数，重新渲染。异步的setState在后面的章节会实现。\r\n        3. 接受到新的props\r\n        react在渲染组件时，组件会被babel转为React.createElement(fn,\r\n        null)这种形式，第一参数是函数，所以我们需要从fn中获取由组件的jsx转换后的虚拟dom，然后在将虚拟dom渲染成真实dom。\r\n      </Descriptions.Item>\r\n    </Descriptions>\r\n  );\r\n};\r\n","import React from \"react\";\r\n// 引入卡片组件\r\nimport { Card, Col, Row } from \"antd\";\r\nimport data from \"./data.json\";\r\nexport default props => {\r\n  return (\r\n    <div>\r\n      <Row gutter={16}>\r\n        {data.reactBase.map((item, index) => {\r\n          return (\r\n            <Col span={8} key={index}>\r\n              <Card title={item.title} bordered={true}>\r\n                {item.content}\r\n              </Card>\r\n            </Col>\r\n          );\r\n        })}\r\n      </Row>\r\n    </div>\r\n  );\r\n};","import React, { Component } from 'react';\r\n// 引入模板组件\r\nimport MyLayout from './components/layout/';\r\n// 引入react基础部分组件\r\nimport ReactBase from './components/ReactBase/';\r\n// 引入组件类型部分组件\r\nimport ComponentType from './components/top-level/';\r\n// 引入插槽组件组件\r\nimport Slot from './components/slot/';\r\n// 引入class组件和无状态组件介绍 组件\r\nimport ClassState from './components//class-Stateless/';\r\nimport Comwtym from './components/comwtym';\r\nimport Comwtym2 from './components/comwtym2';\r\nimport Comzjfl from './components/comzjfl';\r\nimport Reactdfzhqy from './components/Reactdfzhqy';\r\nexport default class inde extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isCom: 'reactBase' //要渲染的组件标识\r\n    };\r\n\r\n    window.onhashchange = () => {\r\n      this.setState({\r\n        isCom: window.location.hash.slice(1)\r\n      });\r\n    };\r\n  }\r\n\r\n  // 根据点击的菜单通过改变hash值来显示相应的页面\r\n  changeHash = id => {\r\n    // 改变页面hash值\r\n    window.location.hash = id;\r\n\r\n    // console.log(window.location.hash.slice(1))\r\n  };\r\n\r\n  render() {\r\n    // 通过判断state中isCom从而渲染相应的组件\r\n    let Dom = '';\r\n    // eslint-disable-next-line default-case\r\n    switch (this.state.isCom) {\r\n      case 'reactBase':\r\n        Dom = <ReactBase />;\r\n        break;\r\n      case 'ComponentType':\r\n        Dom = <ComponentType />;\r\n        break;\r\n      case 'Slot':\r\n        Dom = <Slot />;\r\n        break;\r\n      case 'ClassState':\r\n        Dom = <ClassState />;\r\n        break;\r\n      case 'Comwtym':\r\n        Dom = <Comwtym />;\r\n        break;\r\n      case 'Comwtym2':\r\n        Dom = <Comwtym2 />;\r\n        break;\r\n      case 'Comzjfl':\r\n        Dom = <Comzjfl />;\r\n        break;\r\n      case 'Reactdfzhqy':\r\n        Dom = <Reactdfzhqy />;\r\n        break;\r\n    }\r\n    return (\r\n      <div>\r\n        {/* 引入模板 */}\r\n        <MyLayout changehash={this.changeHash}>\r\n          {/* 渲染点击的菜单对应的组件 */}\r\n          {Dom}\r\n        </MyLayout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './blog/index'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport 'antd/dist/antd.css'\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}